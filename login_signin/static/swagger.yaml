swagger: "2.0"
info:
  version: "1.0.0"
  title: "Authentication API"
  description: "API for user signup, login, and protected routes with JWT authentication"
host: "127.0.0.1:5000"  # Your local host
basePath: "/auth"  # Base path for all endpoints
schemes:
  - "http"
paths:
  /signup:
    post:
      tags:
        - "Authentication"
      summary: "Sign up a new user"
      description: |
        Registers a new user by email and password. The password must be at least 7 characters long and include at least one number. The email must be a valid email format. If successful, a JWT token will be returned in the response.
        The token should be included in the 'Authorization' header in subsequent requests to access protected routes.
      parameters:
        - in: "body"
          name: "body"
          description: "User's email and password"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
                example: "test@example.com"
              password:
                type: "string"
                example: "Pass1234"
                pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{7,}$"
      responses:
        201:
          description: "User created successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User test@example.com created successfully"
              access_token:
                type: "string"
                description: "The JWT token to be used for authenticated requests"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: "Validation error or user already exists"
        500:
          description: "Failed to create user"

  /login:
    post:
      tags:
        - "Authentication"
      summary: "Login a user"
      description: |
        Logs in a user using email and password. The password must be at least 7 characters long and include at least one number. The email must be a valid email format. If successful, a JWT token will be returned in the response.
        This token should be included in the 'Authorization' header for accessing protected routes.
      parameters:
        - in: "body"
          name: "body"
          description: "User's email and password"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
                example: "test@example.com"
              password:
                type: "string"
                example: "Pass1234"
                pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{7,}$"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Login successful"
              access_token:
                type: "string"
                description: "The JWT token to be used for authenticated requests"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: "Invalid credentials"
        404:
          description: "User not found"

  /protected:
    get:
      tags:
        - "Protected"
      summary: "Access a protected route"
      description: |
        Only authenticated users with a valid JWT token can access this route.
        The JWT token should be passed in the 'Authorization' header as a Bearer token.
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Protected resource accessed"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You have accessed a protected route!"
              user_email:
                type: "string"
                example: "test@example.com"
        401:
          description: "Unauthorized access"

securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT token is required. Format: 'Bearer {token}'"
